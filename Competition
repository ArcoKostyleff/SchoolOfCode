#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <ctime>
#include <fstream>
#include <sstream>
using namespace std;
class AimTrainer 
{
public:
    AimTrainer() : window(sf::VideoMode(800, 600), "Aim Trainer"), font(), target(), score(0), shotsFired(0), startTime(0), prod(30), maxRadius(25), minRadius(15), pulseUp(true)
    {
        font.loadFromFile("ArialRegular.ttf");
        scoreText.setFont(font);
        scoreText.setCharacterSize(24);
        scoreText.setPosition(10, 10);
        shotsText.setFont(font);
        shotsText.setCharacterSize(24);
        shotsText.setPosition(10, 40);
        timeText.setFont(font);
        timeText.setCharacterSize(24);
        timeText.setPosition(10, 70);
        loadTarget();
        startTimer();
        if (!hitB.loadFromFile("hit.wav")) 
        {
            cout << "ERROR" << endl;
        }
        hitS.setBuffer(hitB);
    }
    void run() 
    {
        while (window.isOpen())
        {
            Events();
            update();
            render();
        }
    }
private:
    void Events() 
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
            else if (event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left)
                MouseClick(event.mouseButton.x, event.mouseButton.y);
        }
    }
    void update() 
    {
        time_t currentTime = time(0);
        int remainingTime = prod - difftime(currentTime, startTime);
        if (remainingTime < 0) 
        {
            remainingTime = 0; 
            saveStatistics();
            window.close();
            return;
        }
        stringstream ss3;
        ss3 << "Time left: " << remainingTime;
        timeText.setString(ss3.str());
        float scale = 1.0 + sin(time(0) * 0.5) * 0.5;
        target.setRadius(20 * scale);
        stringstream ss;
        ss << "Score: " << score;
        scoreText.setString(ss.str());
        stringstream ss2;
        ss2 << "All shots: " << shotsFired;
        shotsText.setString(ss2.str());
    }
    void render()
    {
        window.clear();
        window.draw(target);
        window.draw(scoreText);
        window.draw(shotsText);
        window.draw(timeText);
        window.display();
    }
    void MouseClick(int x, int y)
    {
        shotsFired++;
        if (target.getGlobalBounds().contains(x, y))
        {
            score++;
            target.setPosition(rand() % 760 + 20, rand() % 560 + 20);
        }
         hitS.play();
    }
    void loadTarget() 
    {
        sf::Texture texture;
        if (!texture.loadFromFile("qwe.jpg"))
        {
            cerr << "ERROR";
        }
        target.setRadius(20);
        target.setTexture(&texture);
        target.setPosition(400, 300);
    }
    void startTimer()
    {
        startTime = time(0);
    }
    void saveStatistics()
    {
        ofstream file("foo.txt");
        if (file.is_open())
        {
            file << "Попадания: " << score << endl;
            file << "Всего выстрелов: " << shotsFired << endl;
            file.close();
        }
        else 
        {
            cerr << "ERROR" << endl;
        }
    }
private:
    sf::RenderWindow window;
    sf::Font font;
    sf::CircleShape target;
    sf::Text scoreText;
    sf::Text shotsText;
    sf::Text timeText;
    sf::SoundBuffer hitB;
    sf::Sound hitS;
    int score;
    int shotsFired;
    time_t startTime;
    int prod;
    float maxRadius;
    float minRadius;
    bool pulseUp;
};
int main() 
{
    setlocale(LC_ALL, "Russian");
    AimTrainer aimTrainer;
    aimTrainer.run();
    return 0;
}
